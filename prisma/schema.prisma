generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @unique @default(uuid())
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  teams    Team[]

  @@map(name: "user")
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  expiresAt DateTime
}

model AuthRefreshToken {
  id    String @id
  email String @unique @db.VarChar(255)

  @@map(name: "authRefreshToken")
}

model Regatta {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  address   String   @db.VarChar(255)
  phone     String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  startDate DateTime
  endDate   DateTime

  @@map(name: "regatta")
}

model Team {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(255)
  division    String            @db.VarChar(255)
  level       String            @db.VarChar(255)
  eligibility String            @db.VarChar(255)
  createdAt   DateTime          @default(now())
  lineups     Lineup[]
  athletes    AthletesInTeams[]
  user        User?             @relation(fields: [userId], references: [id])
  userId      String?

  @@map(name: "team")
}

model Lineup {
  id       String              @id @default(uuid())
  name     String              @db.VarChar(255)
  athletes AthletesInLineups[]
  team     Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String

  @@map(name: "lineup")
}

model Athlete {
  id            String              @id @default(uuid())
  firstName     String              @db.VarChar(255)
  lastName      String              @db.VarChar(255)
  eligibility   String              @db.VarChar(255)
  paddleSide    String              @db.VarChar(255)
  weight        Int?
  email         String              @unique @db.VarChar(255)
  notes         String              @db.MediumText
  isAvailable   Boolean
  isManager     Boolean
  createdAt     DateTime            @default(now())
  paddlerSkills PaddlerSkills[]
  teams         AthletesInTeams[]
  lineups       AthletesInLineups[]

  @@map(name: "athlete")
}

model PaddlerSkills {
  id                      String  @id @default(uuid())
  athlete                 Athlete @relation(fields: [athleteId], references: [id])
  athleteId               String  @unique
  isSteers                Boolean
  isDrummer               Boolean
  isStroker               Boolean
  isCaller                Boolean
  isBailer                Boolean
  is200m                  Boolean
  is500m                  Boolean
  is1000m                 Boolean
  is2000m                 Boolean
  isVeteran               Boolean
  isSteadyTempo           Boolean
  isVocal                 Boolean
  isTechnicallyProficient Boolean
  isLeader                Boolean
  isNewbie                Boolean
  isRushing               Boolean
  isLagging               Boolean
  isTechnicallyPoor       Boolean
  isInjuryProne           Boolean
  isLoadManaged           Boolean
  isPacer                 Boolean
  isEngine                Boolean
  isRocket                Boolean

  @@map(name: "paddlerSkills")
}

model AthletesInTeams {
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  athlete   Athlete  @relation(fields: [athleteId], references: [id])
  athleteId String
  updatedAt DateTime @default(now())

  @@id([teamId, athleteId])
  @@map(name: "athletesInTeams")
}

model AthletesInLineups {
  lineup    Lineup   @relation(fields: [lineupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lineupId  String
  athlete   Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  athleteId String
  position  Int
  updatedAt DateTime @default(now())

  @@id([lineupId, athleteId])
  @@map(name: "athletesInLineups")
}
