generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @unique @default(uuid())
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  teams    Team[]

  @@map(name: "user")
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  expiresAt DateTime
}

model Team {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(255)
  division    String            @db.VarChar(255)
  level       String            @db.VarChar(255)
  eligibility String            @db.VarChar(255)
  createdAt   DateTime          @default(now())
  lineups     Lineup[]
  athletes    AthletesInTeams[]
  racePlans   RacePlan[]
  user        User?             @relation(fields: [userId], references: [id])
  userId      String?

  @@map(name: "team")
}

model Lineup {
  id       String              @id @default(uuid())
  name     String              @db.VarChar(255)
  athletes AthletesInLineups[]
  team     Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String

  @@map(name: "lineup")
}

model Athlete {
  id            String              @id @default(uuid())
  firstName     String              @db.VarChar(255)
  lastName      String              @db.VarChar(255)
  eligibility   String              @db.VarChar(255)
  paddleSide    String              @db.VarChar(255)
  weight        Int?
  email         String              @unique @db.VarChar(255)
  notes         String              @db.Text
  isAvailable   Boolean
  isManager     Boolean
  createdAt     DateTime            @default(now())
  paddlerSkills PaddlerSkills[]
  teams         AthletesInTeams[]
  lineups       AthletesInLineups[]

  @@map(name: "athlete")
}

model PaddlerSkills {
  id                      String  @id @default(uuid())
  athlete                 Athlete @relation(fields: [athleteId], references: [id])
  athleteId               String  @unique
  isSteers                Boolean
  isDrummer               Boolean
  isStroker               Boolean
  isCaller                Boolean
  isBailer                Boolean
  is200m                  Boolean
  is500m                  Boolean
  is1000m                 Boolean
  is2000m                 Boolean
  isVeteran               Boolean
  isSteadyTempo           Boolean
  isVocal                 Boolean
  isTechnicallyProficient Boolean
  isLeader                Boolean
  isNewbie                Boolean
  isRushing               Boolean
  isLagging               Boolean
  isTechnicallyPoor       Boolean
  isInjuryProne           Boolean
  isLoadManaged           Boolean
  isPacer                 Boolean
  isEngine                Boolean
  isRocket                Boolean

  @@map(name: "paddlerSkills")
}

model AthletesInTeams {
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  athlete   Athlete  @relation(fields: [athleteId], references: [id])
  athleteId String
  updatedAt DateTime @default(now())

  @@id([teamId, athleteId])
  @@map(name: "athletesInTeams")
}

model AthletesInLineups {
  athleteId String
  position  Int
  updatedAt DateTime @default(now())

  lineup   Lineup  @relation(fields: [lineupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lineupId String
  athlete  Athlete @relation(fields: [athleteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([lineupId, athleteId])
  @@map(name: "athletesInLineups")
}

//  Race plans

model RacePlan {
  id   String @id @default(uuid())
  name String

  Team           Team?                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId         String
  planSections   PlanSection[]
  regattaSection RegattaPlanSection[]
  mapSection     MapPlanSection[]
  eventSection   EventPlanSection[]
  lineupSection  LineupPlanSection[]
  notesSection   NotesPlanSection[]

  @@map(name: "racePlan")
}

model PlanSection {
  id        String @id
  section   String
  sectionId String
  order     Int

  RacePlan   RacePlan? @relation(fields: [racePlanId], references: [id], onDelete: Cascade)
  racePlanId String?

  @@map(name: "planSection")
}

model RegattaPlanSection {
  id               String    @id
  regattaName      String
  regattaStartDate DateTime?
  regattaEndDate   DateTime?
  regattaAddress   String?
  regattaContact   String?
  regattaEmail     String?
  regattaPhone     String?

  RacePlan   RacePlan? @relation(fields: [racePlanId], references: [id], onDelete: Cascade)
  racePlanId String?

  @@map(name: "regattaPlanSection")
}

model MapPlanSection {
  id           String @id
  mapName      String
  mapLatitude  Float
  mapLongitude Float
  mapZoom      Float

  RacePlan   RacePlan? @relation(fields: [racePlanId], references: [id], onDelete: Cascade)
  racePlanId String?

  @@map(name: "mapPlanSection")
}

model EventPlanSection {
  id            String    @id
  eventName     String?
  eventTime     DateTime?
  eventDistance String?
  eventLane     String?

  RacePlan   RacePlan? @relation(fields: [racePlanId], references: [id], onDelete: Cascade)
  racePlanId String?

  @@map(name: "eventPlanSection")
}

model LineupPlanSection {
  id         String  @id
  lineupName String?
  lineupId   String?

  RacePlan   RacePlan? @relation(fields: [racePlanId], references: [id], onDelete: Cascade)
  racePlanId String?
}

model NotesPlanSection {
  id        String  @id
  notesName String?
  notesBody String? @db.Text

  RacePlan   RacePlan? @relation(fields: [racePlanId], references: [id], onDelete: Cascade)
  racePlanId String?

  @@map(name: "notesPlanSection")
}
